<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

/*
 * MIT License
 * 
 * Copyright (c) 2018-2020 Kazuya Ujihara
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

using ExcelDna.Integration;
using NCDK.Geometries;
using NCDK.Tools.Manipulator;
using static NCDKExcel.Utility;

namespace NCDKExcel
{
    public static partial class DescriptorFunctions
    {
<#
    var filename = Path.Combine(new FileInfo(this.Host.TemplateFile).Directory.FullName, "DescriptorInfo.txt");
    MakeWrappers(filename);
#>
    }
}

<#+
    public static IList<string> SplitLine(string line)
    {
        return line.Split('\t').Select(n => n.Trim()).ToList();
    }

    public static string GetValue(IList<string> values, int index)
    {
        if (values.Count > index)
        {
			var s = values[index];
			// unwrap double quotation
			if (s.StartsWith("\"") && s.EndsWith("\""))
			{
				s = s.Substring(1, s.Length - 2);
				// unescape double quotation
				s = s.Replace("\"\"", "\"");
			}
            return s;
		}
        return null;
    }

    public string Value(string value)
    {
        return value;
    }

    public void MakeWrappers(string filename)
    {
        IList<string> titleRow = null;
        using (var reader = new StreamReader(filename))
        {
			int idx_kit_name = -1;
            int idx_function_name = -1;
            int idx_initializer = -1;
            int idx_return_type = -1;
            int idx_calc_func = -1;
            int idx_preparation = -1;
            int idx_geometry3D = -1;
            int idx_static = -1;
            int idx_description = -1;

            string line;
            while ((line = reader.ReadLine()) != null)
            {
                if (titleRow == null)
                {
                    titleRow = SplitLine(line);
					idx_kit_name = titleRow.IndexOf("kit_name"); 
                    idx_function_name = titleRow.IndexOf("function_name");
                    idx_initializer = titleRow.IndexOf("initializer");
                    idx_return_type = titleRow.IndexOf("return_type");
                    idx_calc_func = titleRow.IndexOf("calc_func");
                    idx_preparation = titleRow.IndexOf("preparation");
                    idx_geometry3D = titleRow.IndexOf("geometry3D");
                    idx_static = titleRow.IndexOf("static");
                    idx_description = titleRow.IndexOf("description");
                    continue;
                }

                IList<string> values = SplitLine(line);
				string kit_name = GetValue(values, idx_kit_name);
                string func_name = GetValue(values, idx_function_name);
                string initializer = GetValue(values, idx_initializer);
                string return_type = GetValue(values, idx_return_type);
                string calc_func = GetValue(values, idx_calc_func);
                string preparation = GetValue(values, idx_preparation);
                string geometry3D = GetValue(values, idx_geometry3D);
                string sstatic = GetValue(values, idx_static);
                string description = GetValue(values, idx_description);

                string excelReturnType = null;
                string extractValue = null;
                string calcReturnType = null;

                switch (return_type)
                {
                    case "DescriptorValue_int[]":
                        calcReturnType = "DescriptorValue<ArrayResult<int>>";
                        excelReturnType = "string";
                        extractValue = "ToExcelString(result)";
                        break;
                    case "DescriptorValue_double[]":
                        calcReturnType = "DescriptorValue<ArrayResult<double>>";
                        excelReturnType = "string";
                        extractValue = "ToExcelString(result)";
                        break;
                    case "DescriptorValue_int":
                        calcReturnType = "DescriptorValue<Result<int>>";
                        excelReturnType = "double";
                        extractValue = "result.Value";
                        break;
                    case "DescriptorValue_double":
                        calcReturnType = "DescriptorValue<Result<double>>";
                        excelReturnType = "double";
                        extractValue = "result.Value";
                        break;
                    case "double":
                        calcReturnType = "double";
                        excelReturnType = "double";
                        extractValue = "result";
                        break;
					 case "string":
                        calcReturnType = "string";
                        excelReturnType = "string";
                        extractValue = "result";
                        break;
                    case "IBitFingerprint":
                        calcReturnType = "IBitFingerprint";
                        excelReturnType = "string";
                        extractValue = "ToExcelString(result)";
                        break;
					// RDKit
					case "ExplicitBitVect":
					case "SparseIntVect32":
					case "SparseIntVect64":
						calcReturnType = return_type;
                        excelReturnType = "string";
                        extractValue = "ToExcelString(result)";
                        break;
					default:
                        if (return_type == null)
                            return_type = "null";
                        throw new Exception("Unexpected return type " + return_type.ToString() + ".");
                }

                string nullableExcelReturnType = excelReturnType;
                if (nullableExcelReturnType != "string")
                    nullableExcelReturnType = nullableExcelReturnType + "?";
#>
        [ExcelFunction(<#= string.IsNullOrEmpty(description) ? "": "Description = \"" + description +"\"" #>)]
        public static <#= excelReturnType #> <#= kit_name #>_<#= func_name #>(string molecule_ident)
        {
            var ret = Caching<<#= nullableExcelReturnType #>>.Calculate(molecule_ident, "<#= kit_name #>_<#= func_name #>",
                mol =>
                {
                <#= nullableExcelReturnType #> nReturnValue = null;
<#+
                if (sstatic != "TRUE")
                {
#>
                var descriptor = <#= initializer #>;
<#+
                }
#>
<#+
                if (preparation != null)
                {
#>
                <#= preparation #>
<#+
                }
#>
<#+
                if (geometry3D == "TRUE")
                {
#>
                if (!GeometryUtil.Has3DCoordinates(mol))
                {
                    nReturnValue = <#= excelReturnType == "double" ? "double.NaN" : "null" #> ;
                }
                else
<#+
                }
#>
                if (nReturnValue == null)
                {
                    var result = <#= sstatic == "TRUE" ? initializer : "descriptor" #>.<#= calc_func #>(mol);
                    nReturnValue = <#= extractValue #>;
                }

                return (<#= excelReturnType #>)nReturnValue;
                });
            return (<#= excelReturnType #>)ret;
        }
<#+
            }
        }
    }
#>
